// created: 2016-8-5 14:00:36
// version: master
// url: https://github.com/prisms-center/IntegrationToolsWriter.git
// commit: 8a15adf67355fad30bd75ce9ba6b1f8d24b9a537

#ifndef von_mises_HH
#define von_mises_HH

#include <cmath>
#include <cstdlib>
#include "../../../../utils/IntegrationTools/PFunction.hh"

namespace PRISMS
{
    template< class VarContainer>
    class von_mises_f : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return  8.1649658092772603e-01*var[4]+pow( pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00),(1.0/2.0))+-8.1649658092772603e-01*var[3];
        }

    public:

        von_mises_f()
        {
            this->_name = "von_mises_f";
        }

        std::string csrc() const
        {
            return " 8.1649658092772603e-01*var[4]+pow( pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00),(1.0/2.0))+-8.1649658092772603e-01*var[3]";
        }

        std::string sym() const
        {
            return "(0.8164965809277260327)*q-(0.8164965809277260327)*tau_y+sqrt((-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0)+(-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1)^(2.0)+((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0))";
        }

        std::string latex() const
        {
            return "\\sqrt{{(-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}}}-{(0.8164965809277260327)} tau_y+{(0.8164965809277260327)} q";
        }

        von_mises_f* clone() const
        {
            return new von_mises_f(*this);
        }
    };

    template< class VarContainer>
    class von_mises_grad_0 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return (1.0/2.0)*pow( pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))*( 6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7]+-6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2]);
        }

    public:

        von_mises_grad_0()
        {
            this->_name = "von_mises_grad_0";
        }

        std::string csrc() const
        {
            return "(1.0/2.0)*pow( pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))*( 6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7]+-6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2])";
        }

        std::string sym() const
        {
            return "1/2*(((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2)^(2.0))^(-1/2)*((1.3333333333333333334)*beta1+(0.6666666666666666667)*xi3-(0.6666666666666666667)*beta2-(1.3333333333333333334)*xi1-(0.6666666666666666667)*beta3+(0.6666666666666666667)*xi2)";
        }

        std::string latex() const
        {
            return "\\frac{1}{2} \\frac{{(0.6666666666666666667)} xi3-{(0.6666666666666666667)} beta2-{(1.3333333333333333334)} xi1-{(0.6666666666666666667)} beta3+{(0.6666666666666666667)} xi2+{(1.3333333333333333334)} beta1}{\\sqrt{{(-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}}}}";
        }

        von_mises_grad_0* clone() const
        {
            return new von_mises_grad_0(*this);
        }
    };

    template< class VarContainer>
    class von_mises_grad_1 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return (1.0/2.0)*( 6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0]+6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1])*pow( pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00),-(1.0/2.0));
        }

    public:

        von_mises_grad_1()
        {
            this->_name = "von_mises_grad_1";
        }

        std::string csrc() const
        {
            return "(1.0/2.0)*( 6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0]+6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1])*pow( pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00),-(1.0/2.0))";
        }

        std::string sym() const
        {
            return "1/2*(((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2)^(2.0)+(-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0))^(-1/2)*((0.6666666666666666667)*xi1-(0.6666666666666666667)*beta3-(1.3333333333333333334)*xi2-(0.6666666666666666667)*beta1+(0.6666666666666666667)*xi3+(1.3333333333333333334)*beta2)";
        }

        std::string latex() const
        {
            return "\\frac{1}{2} \\frac{-{(1.3333333333333333334)} xi2-{(0.6666666666666666667)} beta1+{(0.6666666666666666667)} xi3+{(1.3333333333333333334)} beta2+{(0.6666666666666666667)} xi1-{(0.6666666666666666667)} beta3}{\\sqrt{{(-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}}}";
        }

        von_mises_grad_1* clone() const
        {
            return new von_mises_grad_1(*this);
        }
    };

    template< class VarContainer>
    class von_mises_grad_2 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return (1.0/2.0)*pow( pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6],2.0000000000000000e+00),-(1.0/2.0))*( -6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1]+6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[6]);
        }

    public:

        von_mises_grad_2()
        {
            this->_name = "von_mises_grad_2";
        }

        std::string csrc() const
        {
            return "(1.0/2.0)*pow( pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6],2.0000000000000000e+00),-(1.0/2.0))*( -6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1]+6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[6])";
        }

        std::string sym() const
        {
            return "1/2*((-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3)^(2.0)+((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0))^(-1/2)*(-(0.6666666666666666667)*beta2+(0.6666666666666666667)*xi1+(1.3333333333333333334)*beta3+(0.6666666666666666667)*xi2-(0.6666666666666666667)*beta1-(1.3333333333333333334)*xi3)";
        }

        std::string latex() const
        {
            return "\\frac{1}{2} \\frac{{(0.6666666666666666667)} xi1+{(1.3333333333333333334)} beta3+{(0.6666666666666666667)} xi2-{(0.6666666666666666667)} beta1-{(1.3333333333333333334)} xi3-{(0.6666666666666666667)} beta2}{\\sqrt{{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{(-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}}}";
        }

        von_mises_grad_2* clone() const
        {
            return new von_mises_grad_2(*this);
        }
    };

    template< class VarContainer>
    class von_mises_grad_3 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -8.1649658092772603e-01;
        }

    public:

        von_mises_grad_3()
        {
            this->_name = "von_mises_grad_3";
        }

        std::string csrc() const
        {
            return "-8.1649658092772603e-01";
        }

        std::string sym() const
        {
            return "-0.8164965809277260327";
        }

        std::string latex() const
        {
            return "-0.8164965809277260327";
        }

        von_mises_grad_3* clone() const
        {
            return new von_mises_grad_3(*this);
        }
    };

    template< class VarContainer>
    class von_mises_grad_4 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 8.1649658092772603e-01;
        }

    public:

        von_mises_grad_4()
        {
            this->_name = "von_mises_grad_4";
        }

        std::string csrc() const
        {
            return "8.1649658092772603e-01";
        }

        std::string sym() const
        {
            return "0.8164965809277260327";
        }

        std::string latex() const
        {
            return "0.8164965809277260327";
        }

        von_mises_grad_4* clone() const
        {
            return new von_mises_grad_4(*this);
        }
    };

    template< class VarContainer>
    class von_mises_grad_5 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return (1.0/2.0)*pow( pow( -3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))*( -1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[1]+2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2]);
        }

    public:

        von_mises_grad_5()
        {
            this->_name = "von_mises_grad_5";
        }

        std::string csrc() const
        {
            return "(1.0/2.0)*pow( pow( -3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))*( -1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[1]+2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2])";
        }

        std::string sym() const
        {
            return "1/2*((0.6666666666666666667)*beta2+(2.0)*xi1+(0.6666666666666666667)*beta3-(1.3333333333333333334)*beta1)*((-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0)+(-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1)^(2.0)+((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0))^(-1/2)";
        }

        std::string latex() const
        {
            return "\\frac{1}{2} \\frac{{(2.0)} xi1+{(0.6666666666666666667)} beta3-{(1.3333333333333333334)} beta1+{(0.6666666666666666667)} beta2}{\\sqrt{{(-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}}}}";
        }

        von_mises_grad_5* clone() const
        {
            return new von_mises_grad_5(*this);
        }
    };

    template< class VarContainer>
    class von_mises_grad_6 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return (1.0/2.0)*pow( pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5],2.0000000000000000e+00),-(1.0/2.0))*( 6.6666666666666663e-01*var[2]+2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[1]);
        }

    public:

        von_mises_grad_6()
        {
            this->_name = "von_mises_grad_6";
        }

        std::string csrc() const
        {
            return "(1.0/2.0)*pow( pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5],2.0000000000000000e+00),-(1.0/2.0))*( 6.6666666666666663e-01*var[2]+2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[1])";
        }

        std::string sym() const
        {
            return "1/2*((2.0)*xi2+(0.6666666666666666667)*beta1-(1.3333333333333333334)*beta2+(0.6666666666666666667)*beta3)*(((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0))^(-1/2)";
        }

        std::string latex() const
        {
            return "\\frac{1}{2} \\frac{-{(1.3333333333333333334)} beta2+{(0.6666666666666666667)} beta3+{(2.0)} xi2+{(0.6666666666666666667)} beta1}{\\sqrt{{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{(-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1)}^{{(2.0)}}}}";
        }

        von_mises_grad_6* clone() const
        {
            return new von_mises_grad_6(*this);
        }
    };

    template< class VarContainer>
    class von_mises_grad_7 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return (1.0/2.0)*pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00),-(1.0/2.0))*( 6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7]);
        }

    public:

        von_mises_grad_7()
        {
            this->_name = "von_mises_grad_7";
        }

        std::string csrc() const
        {
            return "(1.0/2.0)*pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00),-(1.0/2.0))*( 6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7])";
        }

        std::string sym() const
        {
            return "1/2*((-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0)+((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2)^(2.0))^(-1/2)*(-(1.3333333333333333334)*beta3+(0.6666666666666666667)*beta1+(2.0)*xi3+(0.6666666666666666667)*beta2)";
        }

        std::string latex() const
        {
            return "\\frac{1}{2} \\frac{{(0.6666666666666666667)} beta1+{(2.0)} xi3+{(0.6666666666666666667)} beta2-{(1.3333333333333333334)} beta3}{\\sqrt{{(-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}}}";
        }

        von_mises_grad_7* clone() const
        {
            return new von_mises_grad_7(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_0_0 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -pow( 1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7]+-6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2]+6.6666666666666663e-01*var[6],2.0)*pow( pow( -3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))/4.0+6.6666666666666663e-01*pow( pow( -3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0));
        }

    public:

        von_mises_hess_0_0()
        {
            this->_name = "von_mises_hess_0_0";
        }

        std::string csrc() const
        {
            return "-pow( 1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7]+-6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2]+6.6666666666666663e-01*var[6],2.0)*pow( pow( -3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))/4.0+6.6666666666666663e-01*pow( pow( -3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))";
        }

        std::string sym() const
        {
            return "-1/4*(((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0)+(-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0))^(-3/2)*((0.6666666666666666667)*xi3-(0.6666666666666666667)*beta2-(1.3333333333333333334)*xi1-(0.6666666666666666667)*beta3+(0.6666666666666666667)*xi2+(1.3333333333333333334)*beta1)^2+(0.6666666666666666667)*(((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0)+(-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0))^(-1/2)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{{(-{(1.3333333333333333334)} xi1-{(0.6666666666666666667)} beta3+{(0.6666666666666666667)} xi2+{(1.3333333333333333334)} beta1+{(0.6666666666666666667)} xi3-{(0.6666666666666666667)} beta2)}^{2}}{{({(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{(-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}+{(0.6666666666666666667)} \\frac{1}{\\sqrt{{(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{(-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2)}^{{(2.0)}}}}";
        }

        von_mises_hess_0_0* clone() const
        {
            return new von_mises_hess_0_0(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_0_1 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -pow( pow( -3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))*( -6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0]+6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[5])*( -6.6666666666666663e-01*var[2]+6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7]+-6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[5])/4.0+-3.3333333333333331e-01*pow( pow( -3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(1.0/2.0));
        }

    public:

        von_mises_hess_0_1()
        {
            this->_name = "von_mises_hess_0_1";
        }

        std::string csrc() const
        {
            return "-pow( pow( -3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))*( -6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0]+6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[5])*( -6.6666666666666663e-01*var[2]+6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7]+-6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[5])/4.0+-3.3333333333333331e-01*pow( pow( -3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(1.0/2.0))";
        }

        std::string sym() const
        {
            return "-(0.33333333333333333334)*(((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0))^(-1/2)-1/4*(((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0))^(-3/2)*((0.6666666666666666667)*xi2+(1.3333333333333333334)*beta1+(0.6666666666666666667)*xi3-(0.6666666666666666667)*beta2-(1.3333333333333333334)*xi1-(0.6666666666666666667)*beta3)*(-(1.3333333333333333334)*xi2-(0.6666666666666666667)*beta1+(0.6666666666666666667)*xi3+(1.3333333333333333334)*beta2+(0.6666666666666666667)*xi1-(0.6666666666666666667)*beta3)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {({(0.6666666666666666667)} xi3+{(1.3333333333333333334)} beta2+{(0.6666666666666666667)} xi1-{(0.6666666666666666667)} beta3-{(1.3333333333333333334)} xi2-{(0.6666666666666666667)} beta1)} {({(0.6666666666666666667)} xi3-{(0.6666666666666666667)} beta2-{(1.3333333333333333334)} xi1-{(0.6666666666666666667)} beta3+{(0.6666666666666666667)} xi2+{(1.3333333333333333334)} beta1)}}{{({(-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}-{(0.33333333333333333334)} \\frac{1}{\\sqrt{{(-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}}}}";
        }

        von_mises_hess_0_1* clone() const
        {
            return new von_mises_hess_0_1(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_0_2 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return  -3.3333333333333331e-01*pow( pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00),-(1.0/2.0))-( -6.6666666666666663e-01*var[1]+6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7])*( -6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2]+6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7])*pow( pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00),-(3.0/2.0))/4.0;
        }

    public:

        von_mises_hess_0_2()
        {
            this->_name = "von_mises_hess_0_2";
        }

        std::string csrc() const
        {
            return " -3.3333333333333331e-01*pow( pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00),-(1.0/2.0))-( -6.6666666666666663e-01*var[1]+6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7])*( -6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2]+6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7])*pow( pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00),-(3.0/2.0))/4.0";
        }

        std::string sym() const
        {
            return "-1/4*(-(1.3333333333333333334)*xi1-(0.6666666666666666667)*beta3+(0.6666666666666666667)*xi2+(1.3333333333333333334)*beta1+(0.6666666666666666667)*xi3-(0.6666666666666666667)*beta2)*((0.6666666666666666667)*xi1+(1.3333333333333333334)*beta3+(0.6666666666666666667)*xi2-(0.6666666666666666667)*beta1-(1.3333333333333333334)*xi3-(0.6666666666666666667)*beta2)*((-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2)^(2.0)+((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0))^(-3/2)-(0.33333333333333333334)*((-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2)^(2.0)+((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0))^(-1/2)";
        }

        std::string latex() const
        {
            return "-{(0.33333333333333333334)} \\frac{1}{\\sqrt{{(-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}}}-\\frac{1}{4} \\frac{ {({(0.6666666666666666667)} xi2+{(1.3333333333333333334)} beta1+{(0.6666666666666666667)} xi3-{(0.6666666666666666667)} beta2-{(1.3333333333333333334)} xi1-{(0.6666666666666666667)} beta3)} {({(0.6666666666666666667)} xi2-{(0.6666666666666666667)} beta1-{(1.3333333333333333334)} xi3-{(0.6666666666666666667)} beta2+{(0.6666666666666666667)} xi1+{(1.3333333333333333334)} beta3)}}{{({(-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}";
        }

        von_mises_hess_0_2* clone() const
        {
            return new von_mises_hess_0_2(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_0_3 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_0_3()
        {
            this->_name = "von_mises_hess_0_3";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_0_3* clone() const
        {
            return new von_mises_hess_0_3(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_0_4 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_0_4()
        {
            this->_name = "von_mises_hess_0_4";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_0_4* clone() const
        {
            return new von_mises_hess_0_4(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_0_5 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return  -6.6666666666666663e-01*pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00),-(1.0/2.0))-pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00),-(3.0/2.0))*( 6.6666666666666663e-01*var[1]+2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[0])*( -6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2]+6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7])/4.0;
        }

    public:

        von_mises_hess_0_5()
        {
            this->_name = "von_mises_hess_0_5";
        }

        std::string csrc() const
        {
            return " -6.6666666666666663e-01*pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00),-(1.0/2.0))-pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00),-(3.0/2.0))*( 6.6666666666666663e-01*var[1]+2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[0])*( -6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2]+6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7])/4.0";
        }

        std::string sym() const
        {
            return "-1/4*(-(1.3333333333333333334)*xi1-(0.6666666666666666667)*beta3+(0.6666666666666666667)*xi2+(1.3333333333333333334)*beta1+(0.6666666666666666667)*xi3-(0.6666666666666666667)*beta2)*(((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2)^(2.0)+(-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0))^(-3/2)*((2.0)*xi1+(0.6666666666666666667)*beta3-(1.3333333333333333334)*beta1+(0.6666666666666666667)*beta2)-(0.6666666666666666667)*(((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2)^(2.0)+(-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0))^(-1/2)";
        }

        std::string latex() const
        {
            return "-{(0.6666666666666666667)} \\frac{1}{\\sqrt{{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{(-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3)}^{{(2.0)}}}}-\\frac{1}{4} \\frac{ {(-{(1.3333333333333333334)} beta1+{(0.6666666666666666667)} beta2+{(2.0)} xi1+{(0.6666666666666666667)} beta3)} {({(0.6666666666666666667)} xi2+{(1.3333333333333333334)} beta1+{(0.6666666666666666667)} xi3-{(0.6666666666666666667)} beta2-{(1.3333333333333333334)} xi1-{(0.6666666666666666667)} beta3)}}{{({({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{(-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}";
        }

        von_mises_hess_0_5* clone() const
        {
            return new von_mises_hess_0_5(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_0_6 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return  3.3333333333333331e-01*pow( pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))-pow( pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))*( 2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[2])*( 6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7]+-6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2])/4.0;
        }

    public:

        von_mises_hess_0_6()
        {
            this->_name = "von_mises_hess_0_6";
        }

        std::string csrc() const
        {
            return " 3.3333333333333331e-01*pow( pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))-pow( pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))*( 2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[2])*( 6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7]+-6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2])/4.0";
        }

        std::string sym() const
        {
            return "-1/4*(-(1.3333333333333333334)*beta2+(0.6666666666666666667)*beta3+(2.0)*xi2+(0.6666666666666666667)*beta1)*((0.6666666666666666667)*xi3-(0.6666666666666666667)*beta2-(1.3333333333333333334)*xi1-(0.6666666666666666667)*beta3+(0.6666666666666666667)*xi2+(1.3333333333333333334)*beta1)*(((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0)+(-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0))^(-3/2)+(0.33333333333333333334)*(((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0)+(-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0))^(-1/2)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {(-{(1.3333333333333333334)} beta2+{(0.6666666666666666667)} beta3+{(2.0)} xi2+{(0.6666666666666666667)} beta1)} {(-{(0.6666666666666666667)} beta2-{(1.3333333333333333334)} xi1-{(0.6666666666666666667)} beta3+{(0.6666666666666666667)} xi2+{(1.3333333333333333334)} beta1+{(0.6666666666666666667)} xi3)}}{{({({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}+{(0.33333333333333333334)} \\frac{1}{\\sqrt{{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3)}^{{(2.0)}}}}";
        }

        von_mises_hess_0_6* clone() const
        {
            return new von_mises_hess_0_6(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_0_7 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -pow( pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))*( -1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2]+6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7]+-6.6666666666666663e-01*var[1])*( -1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1])/4.0+3.3333333333333331e-01*pow( pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(1.0/2.0));
        }

    public:

        von_mises_hess_0_7()
        {
            this->_name = "von_mises_hess_0_7";
        }

        std::string csrc() const
        {
            return "-pow( pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))*( -1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2]+6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7]+-6.6666666666666663e-01*var[1])*( -1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1])/4.0+3.3333333333333331e-01*pow( pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(1.0/2.0))";
        }

        std::string sym() const
        {
            return "(0.33333333333333333334)*((-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3)^(2.0))^(-1/2)-1/4*((0.6666666666666666667)*xi2+(1.3333333333333333334)*beta1+(0.6666666666666666667)*xi3-(0.6666666666666666667)*beta2-(1.3333333333333333334)*xi1-(0.6666666666666666667)*beta3)*((-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3)^(2.0))^(-3/2)*((0.6666666666666666667)*beta1+(2.0)*xi3+(0.6666666666666666667)*beta2-(1.3333333333333333334)*beta3)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {({(0.6666666666666666667)} beta1+{(2.0)} xi3+{(0.6666666666666666667)} beta2-{(1.3333333333333333334)} beta3)} {({(1.3333333333333333334)} beta1+{(0.6666666666666666667)} xi3-{(0.6666666666666666667)} beta2-{(1.3333333333333333334)} xi1-{(0.6666666666666666667)} beta3+{(0.6666666666666666667)} xi2)}}{{({(-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}+{(0.33333333333333333334)} \\frac{1}{\\sqrt{{(-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}}}";
        }

        von_mises_hess_0_7* clone() const
        {
            return new von_mises_hess_0_7(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_1_0 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return  -3.3333333333333331e-01*pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00),-(1.0/2.0))-pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00),-(3.0/2.0))*( -6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2]+6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7])*( 1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0]+6.6666666666666663e-01*var[7])/4.0;
        }

    public:

        von_mises_hess_1_0()
        {
            this->_name = "von_mises_hess_1_0";
        }

        std::string csrc() const
        {
            return " -3.3333333333333331e-01*pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00),-(1.0/2.0))-pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00),-(3.0/2.0))*( -6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2]+6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7])*( 1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0]+6.6666666666666663e-01*var[7])/4.0";
        }

        std::string sym() const
        {
            return "-(0.33333333333333333334)*((-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0)+((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2)^(2.0))^(-1/2)-1/4*(-(1.3333333333333333334)*xi1-(0.6666666666666666667)*beta3+(0.6666666666666666667)*xi2+(1.3333333333333333334)*beta1+(0.6666666666666666667)*xi3-(0.6666666666666666667)*beta2)*((0.6666666666666666667)*xi1-(0.6666666666666666667)*beta3-(1.3333333333333333334)*xi2-(0.6666666666666666667)*beta1+(0.6666666666666666667)*xi3+(1.3333333333333333334)*beta2)*((-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0)+((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2)^(2.0))^(-3/2)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {(-{(0.6666666666666666667)} beta3+{(0.6666666666666666667)} xi2+{(1.3333333333333333334)} beta1+{(0.6666666666666666667)} xi3-{(0.6666666666666666667)} beta2-{(1.3333333333333333334)} xi1)} {(-{(0.6666666666666666667)} beta3-{(1.3333333333333333334)} xi2-{(0.6666666666666666667)} beta1+{(0.6666666666666666667)} xi3+{(1.3333333333333333334)} beta2+{(0.6666666666666666667)} xi1)}}{{({(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1)}^{{(2.0)}}+{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}-{(0.33333333333333333334)} \\frac{1}{\\sqrt{{(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1)}^{{(2.0)}}+{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}}}}";
        }

        von_mises_hess_1_0* clone() const
        {
            return new von_mises_hess_1_0(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_1_1 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return  6.6666666666666663e-01*pow( pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))-pow( pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))*pow( -1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0]+6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2],2.0)/4.0;
        }

    public:

        von_mises_hess_1_1()
        {
            this->_name = "von_mises_hess_1_1";
        }

        std::string csrc() const
        {
            return " 6.6666666666666663e-01*pow( pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))-pow( pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))*pow( -1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0]+6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2],2.0)/4.0";
        }

        std::string sym() const
        {
            return "(0.6666666666666666667)*((-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1)^(2.0)+((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0))^(-1/2)-1/4*((0.6666666666666666667)*xi3+(1.3333333333333333334)*beta2+(0.6666666666666666667)*xi1-(0.6666666666666666667)*beta3-(1.3333333333333333334)*xi2-(0.6666666666666666667)*beta1)^2*((-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1)^(2.0)+((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0))^(-3/2)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{{({(1.3333333333333333334)} beta2+{(0.6666666666666666667)} xi1-{(0.6666666666666666667)} beta3-{(1.3333333333333333334)} xi2-{(0.6666666666666666667)} beta1+{(0.6666666666666666667)} xi3)}^{2}}{{({(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}+{(0.6666666666666666667)} \\frac{1}{\\sqrt{{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}}}}";
        }

        von_mises_hess_1_1* clone() const
        {
            return new von_mises_hess_1_1(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_1_2 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return  -3.3333333333333331e-01*pow( pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(1.0/2.0))-( 6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1])*pow( pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))*( 6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0]+6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1])/4.0;
        }

    public:

        von_mises_hess_1_2()
        {
            this->_name = "von_mises_hess_1_2";
        }

        std::string csrc() const
        {
            return " -3.3333333333333331e-01*pow( pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(1.0/2.0))-( 6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1])*pow( pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))*( 6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0]+6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1])/4.0";
        }

        std::string sym() const
        {
            return "-1/4*((0.6666666666666666667)*xi2-(0.6666666666666666667)*beta1-(1.3333333333333333334)*xi3-(0.6666666666666666667)*beta2+(0.6666666666666666667)*xi1+(1.3333333333333333334)*beta3)*((-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0))^(-3/2)*(-(1.3333333333333333334)*xi2-(0.6666666666666666667)*beta1+(0.6666666666666666667)*xi3+(1.3333333333333333334)*beta2+(0.6666666666666666667)*xi1-(0.6666666666666666667)*beta3)-(0.33333333333333333334)*((-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0))^(-1/2)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {(-{(0.6666666666666666667)} beta1-{(1.3333333333333333334)} xi3-{(0.6666666666666666667)} beta2+{(0.6666666666666666667)} xi1+{(1.3333333333333333334)} beta3+{(0.6666666666666666667)} xi2)} {(-{(0.6666666666666666667)} beta1+{(0.6666666666666666667)} xi3+{(1.3333333333333333334)} beta2+{(0.6666666666666666667)} xi1-{(0.6666666666666666667)} beta3-{(1.3333333333333333334)} xi2)}}{{({(-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}-{(0.33333333333333333334)} \\frac{1}{\\sqrt{{(-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}}}";
        }

        von_mises_hess_1_2* clone() const
        {
            return new von_mises_hess_1_2(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_1_3 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_1_3()
        {
            this->_name = "von_mises_hess_1_3";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_1_3* clone() const
        {
            return new von_mises_hess_1_3(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_1_4 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_1_4()
        {
            this->_name = "von_mises_hess_1_4";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_1_4* clone() const
        {
            return new von_mises_hess_1_4(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_1_5 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -( 6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0]+6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1])*( 2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[1])*pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))/4.0+3.3333333333333331e-01*pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(1.0/2.0));
        }

    public:

        von_mises_hess_1_5()
        {
            this->_name = "von_mises_hess_1_5";
        }

        std::string csrc() const
        {
            return "-( 6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0]+6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1])*( 2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[1])*pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))/4.0+3.3333333333333331e-01*pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(1.0/2.0))";
        }

        std::string sym() const
        {
            return "-1/4*(-(1.3333333333333333334)*xi2-(0.6666666666666666667)*beta1+(0.6666666666666666667)*xi3+(1.3333333333333333334)*beta2+(0.6666666666666666667)*xi1-(0.6666666666666666667)*beta3)*((-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0))^(-3/2)*(-(1.3333333333333333334)*beta1+(0.6666666666666666667)*beta2+(2.0)*xi1+(0.6666666666666666667)*beta3)+(0.33333333333333333334)*((-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0))^(-1/2)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {(-{(0.6666666666666666667)} beta1+{(0.6666666666666666667)} xi3+{(1.3333333333333333334)} beta2+{(0.6666666666666666667)} xi1-{(0.6666666666666666667)} beta3-{(1.3333333333333333334)} xi2)} {(-{(1.3333333333333333334)} beta1+{(0.6666666666666666667)} beta2+{(2.0)} xi1+{(0.6666666666666666667)} beta3)}}{{({(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}+{(0.33333333333333333334)} \\frac{1}{\\sqrt{{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2)}^{{(2.0)}}}}";
        }

        von_mises_hess_1_5* clone() const
        {
            return new von_mises_hess_1_5(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_1_6 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -( -1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[2]+2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0])*pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00),-(3.0/2.0))*( 6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0])/4.0+-6.6666666666666663e-01*pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00),-(1.0/2.0));
        }

    public:

        von_mises_hess_1_6()
        {
            this->_name = "von_mises_hess_1_6";
        }

        std::string csrc() const
        {
            return "-( -1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[2]+2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0])*pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00),-(3.0/2.0))*( 6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0])/4.0+-6.6666666666666663e-01*pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00),-(1.0/2.0))";
        }

        std::string sym() const
        {
            return "-1/4*((0.6666666666666666667)*beta3+(2.0)*xi2+(0.6666666666666666667)*beta1-(1.3333333333333333334)*beta2)*((-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0)+((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2)^(2.0))^(-3/2)*((0.6666666666666666667)*xi1-(0.6666666666666666667)*beta3-(1.3333333333333333334)*xi2-(0.6666666666666666667)*beta1+(0.6666666666666666667)*xi3+(1.3333333333333333334)*beta2)-(0.6666666666666666667)*((-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0)+((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2)^(2.0))^(-1/2)";
        }

        std::string latex() const
        {
            return "-{(0.6666666666666666667)} \\frac{1}{\\sqrt{{(-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}}}}-\\frac{1}{4} \\frac{ {({(0.6666666666666666667)} xi1-{(0.6666666666666666667)} beta3-{(1.3333333333333333334)} xi2-{(0.6666666666666666667)} beta1+{(0.6666666666666666667)} xi3+{(1.3333333333333333334)} beta2)} {({(0.6666666666666666667)} beta3+{(2.0)} xi2+{(0.6666666666666666667)} beta1-{(1.3333333333333333334)} beta2)}}{{({(-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}";
        }

        von_mises_hess_1_6* clone() const
        {
            return new von_mises_hess_1_6(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_1_7 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return  3.3333333333333331e-01*pow( pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))-( 6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[2])*( -1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0]+6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2])*pow( pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))/4.0;
        }

    public:

        von_mises_hess_1_7()
        {
            this->_name = "von_mises_hess_1_7";
        }

        std::string csrc() const
        {
            return " 3.3333333333333331e-01*pow( pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))-( 6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[2])*( -1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0]+6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2])*pow( pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))/4.0";
        }

        std::string sym() const
        {
            return "-1/4*((0.6666666666666666667)*beta1+(2.0)*xi3+(0.6666666666666666667)*beta2-(1.3333333333333333334)*beta3)*((-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0))^(-3/2)*(-(0.6666666666666666667)*beta1+(0.6666666666666666667)*xi3+(1.3333333333333333334)*beta2+(0.6666666666666666667)*xi1-(0.6666666666666666667)*beta3-(1.3333333333333333334)*xi2)+(0.33333333333333333334)*((-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0))^(-1/2)";
        }

        std::string latex() const
        {
            return "{(0.33333333333333333334)} \\frac{1}{\\sqrt{{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}}}}-\\frac{1}{4} \\frac{ {({(1.3333333333333333334)} beta2+{(0.6666666666666666667)} xi1-{(0.6666666666666666667)} beta3-{(1.3333333333333333334)} xi2-{(0.6666666666666666667)} beta1+{(0.6666666666666666667)} xi3)} {({(0.6666666666666666667)} beta2-{(1.3333333333333333334)} beta3+{(0.6666666666666666667)} beta1+{(2.0)} xi3)}}{{({(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}";
        }

        von_mises_hess_1_7* clone() const
        {
            return new von_mises_hess_1_7(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_2_0 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return  -3.3333333333333331e-01*pow( pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(1.0/2.0))-( 6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1])*( -1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2]+6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7]+-6.6666666666666663e-01*var[1])*pow( pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))/4.0;
        }

    public:

        von_mises_hess_2_0()
        {
            this->_name = "von_mises_hess_2_0";
        }

        std::string csrc() const
        {
            return " -3.3333333333333331e-01*pow( pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(1.0/2.0))-( 6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1])*( -1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2]+6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7]+-6.6666666666666663e-01*var[1])*pow( pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))/4.0";
        }

        std::string sym() const
        {
            return "-(0.33333333333333333334)*((-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0)+(-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0))^(-1/2)-1/4*((0.6666666666666666667)*xi2+(1.3333333333333333334)*beta1+(0.6666666666666666667)*xi3-(0.6666666666666666667)*beta2-(1.3333333333333333334)*xi1-(0.6666666666666666667)*beta3)*((-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0)+(-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0))^(-3/2)*((0.6666666666666666667)*xi2-(0.6666666666666666667)*beta1-(1.3333333333333333334)*xi3-(0.6666666666666666667)*beta2+(0.6666666666666666667)*xi1+(1.3333333333333333334)*beta3)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {(-{(0.6666666666666666667)} beta1-{(1.3333333333333333334)} xi3-{(0.6666666666666666667)} beta2+{(0.6666666666666666667)} xi1+{(1.3333333333333333334)} beta3+{(0.6666666666666666667)} xi2)} {({(1.3333333333333333334)} beta1+{(0.6666666666666666667)} xi3-{(0.6666666666666666667)} beta2-{(1.3333333333333333334)} xi1-{(0.6666666666666666667)} beta3+{(0.6666666666666666667)} xi2)}}{{({(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}-{(0.33333333333333333334)} \\frac{1}{\\sqrt{{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}}}";
        }

        von_mises_hess_2_0* clone() const
        {
            return new von_mises_hess_2_0(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_2_1 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -( 6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0])*( -1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1]+6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0])*pow( pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00),-(3.0/2.0))/4.0+-3.3333333333333331e-01*pow( pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00),-(1.0/2.0));
        }

    public:

        von_mises_hess_2_1()
        {
            this->_name = "von_mises_hess_2_1";
        }

        std::string csrc() const
        {
            return "-( 6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0])*( -1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1]+6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0])*pow( pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00),-(3.0/2.0))/4.0+-3.3333333333333331e-01*pow( pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00),-(1.0/2.0))";
        }

        std::string sym() const
        {
            return "-(0.33333333333333333334)*((-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0)+((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3)^(2.0))^(-1/2)-1/4*((-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0)+((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3)^(2.0))^(-3/2)*(-(0.6666666666666666667)*beta2+(0.6666666666666666667)*xi1+(1.3333333333333333334)*beta3+(0.6666666666666666667)*xi2-(0.6666666666666666667)*beta1-(1.3333333333333333334)*xi3)*((1.3333333333333333334)*beta2+(0.6666666666666666667)*xi1-(0.6666666666666666667)*beta3-(1.3333333333333333334)*xi2-(0.6666666666666666667)*beta1+(0.6666666666666666667)*xi3)";
        }

        std::string latex() const
        {
            return "-{(0.33333333333333333334)} \\frac{1}{\\sqrt{{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{(-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2)}^{{(2.0)}}}}-\\frac{1}{4} \\frac{ {({(0.6666666666666666667)} xi1-{(0.6666666666666666667)} beta3-{(1.3333333333333333334)} xi2-{(0.6666666666666666667)} beta1+{(0.6666666666666666667)} xi3+{(1.3333333333333333334)} beta2)} {({(0.6666666666666666667)} xi1+{(1.3333333333333333334)} beta3+{(0.6666666666666666667)} xi2-{(0.6666666666666666667)} beta1-{(1.3333333333333333334)} xi3-{(0.6666666666666666667)} beta2)}}{{({({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{(-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}";
        }

        von_mises_hess_2_1* clone() const
        {
            return new von_mises_hess_2_1(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_2_2 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return  6.6666666666666663e-01*pow( pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))-pow( 6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1]+6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2],2.0)*pow( pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))/4.0;
        }

    public:

        von_mises_hess_2_2()
        {
            this->_name = "von_mises_hess_2_2";
        }

        std::string csrc() const
        {
            return " 6.6666666666666663e-01*pow( pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))-pow( 6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1]+6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2],2.0)*pow( pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))/4.0";
        }

        std::string sym() const
        {
            return "-1/4*(-(0.6666666666666666667)*beta1-(1.3333333333333333334)*xi3-(0.6666666666666666667)*beta2+(0.6666666666666666667)*xi1+(1.3333333333333333334)*beta3+(0.6666666666666666667)*xi2)^2*((-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0))^(-3/2)+(0.6666666666666666667)*((-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0))^(-1/2)";
        }

        std::string latex() const
        {
            return "{(0.6666666666666666667)} \\frac{1}{\\sqrt{{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3)}^{{(2.0)}}}}-\\frac{1}{4} \\frac{{(-{(0.6666666666666666667)} beta2+{(0.6666666666666666667)} xi1+{(1.3333333333333333334)} beta3+{(0.6666666666666666667)} xi2-{(0.6666666666666666667)} beta1-{(1.3333333333333333334)} xi3)}^{2}}{{({({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}";
        }

        von_mises_hess_2_2* clone() const
        {
            return new von_mises_hess_2_2(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_2_3 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_2_3()
        {
            this->_name = "von_mises_hess_2_3";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_2_3* clone() const
        {
            return new von_mises_hess_2_3(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_2_4 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_2_4()
        {
            this->_name = "von_mises_hess_2_4";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_2_4* clone() const
        {
            return new von_mises_hess_2_4(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_2_5 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return  3.3333333333333331e-01*pow( pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))-pow( pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))*( -1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[1]+2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2])*( 6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1]+6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2])/4.0;
        }

    public:

        von_mises_hess_2_5()
        {
            this->_name = "von_mises_hess_2_5";
        }

        std::string csrc() const
        {
            return " 3.3333333333333331e-01*pow( pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))-pow( pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))*( -1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[1]+2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2])*( 6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1]+6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2])/4.0";
        }

        std::string sym() const
        {
            return "-1/4*((-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2)^(2.0)+(-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0))^(-3/2)*(-(0.6666666666666666667)*beta1-(1.3333333333333333334)*xi3-(0.6666666666666666667)*beta2+(0.6666666666666666667)*xi1+(1.3333333333333333334)*beta3+(0.6666666666666666667)*xi2)*(-(1.3333333333333333334)*beta1+(0.6666666666666666667)*beta2+(2.0)*xi1+(0.6666666666666666667)*beta3)+(0.33333333333333333334)*((-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2)^(2.0)+(-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0))^(-1/2)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {({(0.6666666666666666667)} beta2+{(2.0)} xi1+{(0.6666666666666666667)} beta3-{(1.3333333333333333334)} beta1)} {(-{(1.3333333333333333334)} xi3-{(0.6666666666666666667)} beta2+{(0.6666666666666666667)} xi1+{(1.3333333333333333334)} beta3+{(0.6666666666666666667)} xi2-{(0.6666666666666666667)} beta1)}}{{({(-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}+{(0.33333333333333333334)} \\frac{1}{\\sqrt{{(-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}}}}";
        }

        von_mises_hess_2_5* clone() const
        {
            return new von_mises_hess_2_5(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_2_6 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -( 6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1])*( 6.6666666666666663e-01*var[2]+2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[1])*pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))/4.0+3.3333333333333331e-01*pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(1.0/2.0));
        }

    public:

        von_mises_hess_2_6()
        {
            this->_name = "von_mises_hess_2_6";
        }

        std::string csrc() const
        {
            return "-( 6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1])*( 6.6666666666666663e-01*var[2]+2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[1])*pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))/4.0+3.3333333333333331e-01*pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(1.0/2.0))";
        }

        std::string sym() const
        {
            return "-1/4*((0.6666666666666666667)*beta3+(2.0)*xi2+(0.6666666666666666667)*beta1-(1.3333333333333333334)*beta2)*(((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1)^(2.0)+(-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0))^(-3/2)*((1.3333333333333333334)*beta3+(0.6666666666666666667)*xi2-(0.6666666666666666667)*beta1-(1.3333333333333333334)*xi3-(0.6666666666666666667)*beta2+(0.6666666666666666667)*xi1)+(0.33333333333333333334)*(((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1)^(2.0)+(-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0))^(-1/2)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {({(2.0)} xi2+{(0.6666666666666666667)} beta1-{(1.3333333333333333334)} beta2+{(0.6666666666666666667)} beta3)} {({(0.6666666666666666667)} xi2-{(0.6666666666666666667)} beta1-{(1.3333333333333333334)} xi3-{(0.6666666666666666667)} beta2+{(0.6666666666666666667)} xi1+{(1.3333333333333333334)} beta3)}}{{({(-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}+{(0.33333333333333333334)} \\frac{1}{\\sqrt{{(-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}}}";
        }

        von_mises_hess_2_6* clone() const
        {
            return new von_mises_hess_2_6(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_2_7 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -( 2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[0])*( -1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1]+6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0])*pow( pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00),-(3.0/2.0))/4.0+-6.6666666666666663e-01*pow( pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00),-(1.0/2.0));
        }

    public:

        von_mises_hess_2_7()
        {
            this->_name = "von_mises_hess_2_7";
        }

        std::string csrc() const
        {
            return "-( 2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[0])*( -1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1]+6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0])*pow( pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00),-(3.0/2.0))/4.0+-6.6666666666666663e-01*pow( pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00),-(1.0/2.0))";
        }

        std::string sym() const
        {
            return "-(0.6666666666666666667)*(((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3)^(2.0))^(-1/2)-1/4*(((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3)^(2.0))^(-3/2)*(-(0.6666666666666666667)*beta2+(0.6666666666666666667)*xi1+(1.3333333333333333334)*beta3+(0.6666666666666666667)*xi2-(0.6666666666666666667)*beta1-(1.3333333333333333334)*xi3)*((0.6666666666666666667)*beta2-(1.3333333333333333334)*beta3+(0.6666666666666666667)*beta1+(2.0)*xi3)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {({(0.6666666666666666667)} xi1+{(1.3333333333333333334)} beta3+{(0.6666666666666666667)} xi2-{(0.6666666666666666667)} beta1-{(1.3333333333333333334)} xi3-{(0.6666666666666666667)} beta2)} {(-{(1.3333333333333333334)} beta3+{(0.6666666666666666667)} beta1+{(2.0)} xi3+{(0.6666666666666666667)} beta2)}}{{({(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{(-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}-{(0.6666666666666666667)} \\frac{1}{\\sqrt{{(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{(-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}}}}";
        }

        von_mises_hess_2_7* clone() const
        {
            return new von_mises_hess_2_7(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_3_0 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_3_0()
        {
            this->_name = "von_mises_hess_3_0";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_3_0* clone() const
        {
            return new von_mises_hess_3_0(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_3_1 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_3_1()
        {
            this->_name = "von_mises_hess_3_1";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_3_1* clone() const
        {
            return new von_mises_hess_3_1(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_3_2 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_3_2()
        {
            this->_name = "von_mises_hess_3_2";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_3_2* clone() const
        {
            return new von_mises_hess_3_2(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_3_3 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_3_3()
        {
            this->_name = "von_mises_hess_3_3";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_3_3* clone() const
        {
            return new von_mises_hess_3_3(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_3_4 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_3_4()
        {
            this->_name = "von_mises_hess_3_4";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_3_4* clone() const
        {
            return new von_mises_hess_3_4(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_3_5 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_3_5()
        {
            this->_name = "von_mises_hess_3_5";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_3_5* clone() const
        {
            return new von_mises_hess_3_5(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_3_6 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_3_6()
        {
            this->_name = "von_mises_hess_3_6";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_3_6* clone() const
        {
            return new von_mises_hess_3_6(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_3_7 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_3_7()
        {
            this->_name = "von_mises_hess_3_7";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_3_7* clone() const
        {
            return new von_mises_hess_3_7(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_4_0 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_4_0()
        {
            this->_name = "von_mises_hess_4_0";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_4_0* clone() const
        {
            return new von_mises_hess_4_0(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_4_1 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_4_1()
        {
            this->_name = "von_mises_hess_4_1";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_4_1* clone() const
        {
            return new von_mises_hess_4_1(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_4_2 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_4_2()
        {
            this->_name = "von_mises_hess_4_2";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_4_2* clone() const
        {
            return new von_mises_hess_4_2(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_4_3 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_4_3()
        {
            this->_name = "von_mises_hess_4_3";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_4_3* clone() const
        {
            return new von_mises_hess_4_3(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_4_4 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_4_4()
        {
            this->_name = "von_mises_hess_4_4";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_4_4* clone() const
        {
            return new von_mises_hess_4_4(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_4_5 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_4_5()
        {
            this->_name = "von_mises_hess_4_5";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_4_5* clone() const
        {
            return new von_mises_hess_4_5(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_4_6 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_4_6()
        {
            this->_name = "von_mises_hess_4_6";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_4_6* clone() const
        {
            return new von_mises_hess_4_6(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_4_7 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_4_7()
        {
            this->_name = "von_mises_hess_4_7";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_4_7* clone() const
        {
            return new von_mises_hess_4_7(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_5_0 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00),-(3.0/2.0))*( -6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2]+6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7])*( 6.6666666666666663e-01*var[1]+2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[0])/4.0+-6.6666666666666663e-01*pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00),-(1.0/2.0));
        }

    public:

        von_mises_hess_5_0()
        {
            this->_name = "von_mises_hess_5_0";
        }

        std::string csrc() const
        {
            return "-pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00),-(3.0/2.0))*( -6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2]+6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7])*( 6.6666666666666663e-01*var[1]+2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[0])/4.0+-6.6666666666666663e-01*pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00),-(1.0/2.0))";
        }

        std::string sym() const
        {
            return "-(0.6666666666666666667)*((-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0)+((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2)^(2.0))^(-1/2)-1/4*((-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0)+((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2)^(2.0))^(-3/2)*(-(1.3333333333333333334)*xi1-(0.6666666666666666667)*beta3+(0.6666666666666666667)*xi2+(1.3333333333333333334)*beta1+(0.6666666666666666667)*xi3-(0.6666666666666666667)*beta2)*((2.0)*xi1+(0.6666666666666666667)*beta3-(1.3333333333333333334)*beta1+(0.6666666666666666667)*beta2)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {(-{(0.6666666666666666667)} beta3+{(0.6666666666666666667)} xi2+{(1.3333333333333333334)} beta1+{(0.6666666666666666667)} xi3-{(0.6666666666666666667)} beta2-{(1.3333333333333333334)} xi1)} {({(0.6666666666666666667)} beta3-{(1.3333333333333333334)} beta1+{(0.6666666666666666667)} beta2+{(2.0)} xi1)}}{{({({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}-{(0.6666666666666666667)} \\frac{1}{\\sqrt{{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1)}^{{(2.0)}}}}";
        }

        von_mises_hess_5_0* clone() const
        {
            return new von_mises_hess_5_0(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_5_1 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return  3.3333333333333331e-01*pow( pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))-pow( pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))*( -1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0]+6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2])*( -1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[1]+2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2])/4.0;
        }

    public:

        von_mises_hess_5_1()
        {
            this->_name = "von_mises_hess_5_1";
        }

        std::string csrc() const
        {
            return " 3.3333333333333331e-01*pow( pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))-pow( pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))*( -1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0]+6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2])*( -1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[1]+2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2])/4.0";
        }

        std::string sym() const
        {
            return "(0.33333333333333333334)*((-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1)^(2.0)+((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0))^(-1/2)-1/4*((-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1)^(2.0)+((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0))^(-3/2)*((0.6666666666666666667)*beta2+(2.0)*xi1+(0.6666666666666666667)*beta3-(1.3333333333333333334)*beta1)*((0.6666666666666666667)*xi3+(1.3333333333333333334)*beta2+(0.6666666666666666667)*xi1-(0.6666666666666666667)*beta3-(1.3333333333333333334)*xi2-(0.6666666666666666667)*beta1)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {({(0.6666666666666666667)} beta2+{(2.0)} xi1+{(0.6666666666666666667)} beta3-{(1.3333333333333333334)} beta1)} {({(1.3333333333333333334)} beta2+{(0.6666666666666666667)} xi1-{(0.6666666666666666667)} beta3-{(1.3333333333333333334)} xi2-{(0.6666666666666666667)} beta1+{(0.6666666666666666667)} xi3)}}{{({({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}+{(0.33333333333333333334)} \\frac{1}{\\sqrt{{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}}}";
        }

        von_mises_hess_5_1* clone() const
        {
            return new von_mises_hess_5_1(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_5_2 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return  3.3333333333333331e-01*pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00),-(1.0/2.0))-pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))*( 6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1])*( 2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[1])/4.0;
        }

    public:

        von_mises_hess_5_2()
        {
            this->_name = "von_mises_hess_5_2";
        }

        std::string csrc() const
        {
            return " 3.3333333333333331e-01*pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00),-(1.0/2.0))-pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))*( 6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1])*( 2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[1])/4.0";
        }

        std::string sym() const
        {
            return "(0.33333333333333333334)*((-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3)^(2.0))^(-1/2)-1/4*(-(1.3333333333333333334)*beta1+(0.6666666666666666667)*beta2+(2.0)*xi1+(0.6666666666666666667)*beta3)*((-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3)^(2.0))^(-3/2)*((0.6666666666666666667)*xi2-(0.6666666666666666667)*beta1-(1.3333333333333333334)*xi3-(0.6666666666666666667)*beta2+(0.6666666666666666667)*xi1+(1.3333333333333333334)*beta3)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {(-{(0.6666666666666666667)} beta1-{(1.3333333333333333334)} xi3-{(0.6666666666666666667)} beta2+{(0.6666666666666666667)} xi1+{(1.3333333333333333334)} beta3+{(0.6666666666666666667)} xi2)} {(-{(1.3333333333333333334)} beta1+{(0.6666666666666666667)} beta2+{(2.0)} xi1+{(0.6666666666666666667)} beta3)}}{{({(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}+{(0.33333333333333333334)} \\frac{1}{\\sqrt{{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}}}";
        }

        von_mises_hess_5_2* clone() const
        {
            return new von_mises_hess_5_2(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_5_3 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_5_3()
        {
            this->_name = "von_mises_hess_5_3";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_5_3* clone() const
        {
            return new von_mises_hess_5_3(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_5_4 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_5_4()
        {
            this->_name = "von_mises_hess_5_4";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_5_4* clone() const
        {
            return new von_mises_hess_5_4(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_5_5 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -pow( pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))*pow( 2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[1],2.0)/4.0+pow( pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(1.0/2.0));
        }

    public:

        von_mises_hess_5_5()
        {
            this->_name = "von_mises_hess_5_5";
        }

        std::string csrc() const
        {
            return "-pow( pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))*pow( 2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[1],2.0)/4.0+pow( pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(1.0/2.0))";
        }

        std::string sym() const
        {
            return "((-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0)+(-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0))^(-1/2)-1/4*((-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0)+(-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0))^(-3/2)*(-(1.3333333333333333334)*beta1+(0.6666666666666666667)*beta2+(2.0)*xi1+(0.6666666666666666667)*beta3)^2";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{{(-{(1.3333333333333333334)} beta1+{(0.6666666666666666667)} beta2+{(2.0)} xi1+{(0.6666666666666666667)} beta3)}^{2}}{{({(-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}+\\frac{1}{\\sqrt{{(-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}}}";
        }

        von_mises_hess_5_5* clone() const
        {
            return new von_mises_hess_5_5(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_5_6 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -(1.0/4.0)*( 6.6666666666666663e-01*var[1]+2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[0])*pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00),-(3.0/2.0))*( -1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[2]+2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0]);
        }

    public:

        von_mises_hess_5_6()
        {
            this->_name = "von_mises_hess_5_6";
        }

        std::string csrc() const
        {
            return "-(1.0/4.0)*( 6.6666666666666663e-01*var[1]+2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[0])*pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00),-(3.0/2.0))*( -1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[2]+2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0])";
        }

        std::string sym() const
        {
            return "-1/4*((-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2)^(2.0)+((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0))^(-3/2)*((2.0)*xi1+(0.6666666666666666667)*beta3-(1.3333333333333333334)*beta1+(0.6666666666666666667)*beta2)*((0.6666666666666666667)*beta3+(2.0)*xi2+(0.6666666666666666667)*beta1-(1.3333333333333333334)*beta2)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {({(0.6666666666666666667)} beta3+{(2.0)} xi2+{(0.6666666666666666667)} beta1-{(1.3333333333333333334)} beta2)} {({(0.6666666666666666667)} beta3-{(1.3333333333333333334)} beta1+{(0.6666666666666666667)} beta2+{(2.0)} xi1)}}{{({(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1)}^{{(2.0)}}+{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}";
        }

        von_mises_hess_5_6* clone() const
        {
            return new von_mises_hess_5_6(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_5_7 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -(1.0/4.0)*( 6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[2])*pow( pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))*( -1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[1]+2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2]);
        }

    public:

        von_mises_hess_5_7()
        {
            this->_name = "von_mises_hess_5_7";
        }

        std::string csrc() const
        {
            return "-(1.0/4.0)*( 6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[2])*pow( pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))*( -1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[1]+2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2])";
        }

        std::string sym() const
        {
            return "-1/4*(-(1.3333333333333333334)*beta1+(0.6666666666666666667)*beta2+(2.0)*xi1+(0.6666666666666666667)*beta3)*((0.6666666666666666667)*beta1+(2.0)*xi3+(0.6666666666666666667)*beta2-(1.3333333333333333334)*beta3)*(((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2)^(2.0)+(-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0))^(-3/2)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {({(0.6666666666666666667)} beta2+{(2.0)} xi1+{(0.6666666666666666667)} beta3-{(1.3333333333333333334)} beta1)} {({(0.6666666666666666667)} beta2-{(1.3333333333333333334)} beta3+{(0.6666666666666666667)} beta1+{(2.0)} xi3)}}{{({({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}";
        }

        von_mises_hess_5_7* clone() const
        {
            return new von_mises_hess_5_7(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_6_0 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))*( -1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2]+6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7]+-6.6666666666666663e-01*var[1])*( 6.6666666666666663e-01*var[2]+2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[1])/4.0+3.3333333333333331e-01*pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(1.0/2.0));
        }

    public:

        von_mises_hess_6_0()
        {
            this->_name = "von_mises_hess_6_0";
        }

        std::string csrc() const
        {
            return "-pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))*( -1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2]+6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7]+-6.6666666666666663e-01*var[1])*( 6.6666666666666663e-01*var[2]+2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[1])/4.0+3.3333333333333331e-01*pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(1.0/2.0))";
        }

        std::string sym() const
        {
            return "(0.33333333333333333334)*((-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0))^(-1/2)-1/4*((0.6666666666666666667)*xi2+(1.3333333333333333334)*beta1+(0.6666666666666666667)*xi3-(0.6666666666666666667)*beta2-(1.3333333333333333334)*xi1-(0.6666666666666666667)*beta3)*((-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0))^(-3/2)*((2.0)*xi2+(0.6666666666666666667)*beta1-(1.3333333333333333334)*beta2+(0.6666666666666666667)*beta3)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {({(1.3333333333333333334)} beta1+{(0.6666666666666666667)} xi3-{(0.6666666666666666667)} beta2-{(1.3333333333333333334)} xi1-{(0.6666666666666666667)} beta3+{(0.6666666666666666667)} xi2)} {({(0.6666666666666666667)} beta1-{(1.3333333333333333334)} beta2+{(0.6666666666666666667)} beta3+{(2.0)} xi2)}}{{({(-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}+{(0.33333333333333333334)} \\frac{1}{\\sqrt{{(-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}}}";
        }

        von_mises_hess_6_0* clone() const
        {
            return new von_mises_hess_6_0(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_6_1 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -( 6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0])*pow( pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00),-(3.0/2.0))*( -1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[2]+2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0])/4.0+-6.6666666666666663e-01*pow( pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00),-(1.0/2.0));
        }

    public:

        von_mises_hess_6_1()
        {
            this->_name = "von_mises_hess_6_1";
        }

        std::string csrc() const
        {
            return "-( 6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0])*pow( pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00),-(3.0/2.0))*( -1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[2]+2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0])/4.0+-6.6666666666666663e-01*pow( pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00),-(1.0/2.0))";
        }

        std::string sym() const
        {
            return "-(0.6666666666666666667)*((-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3)^(2.0)+((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0))^(-1/2)-1/4*(-(1.3333333333333333334)*beta2+(0.6666666666666666667)*beta3+(2.0)*xi2+(0.6666666666666666667)*beta1)*((-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3)^(2.0)+((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0))^(-3/2)*((1.3333333333333333334)*beta2+(0.6666666666666666667)*xi1-(0.6666666666666666667)*beta3-(1.3333333333333333334)*xi2-(0.6666666666666666667)*beta1+(0.6666666666666666667)*xi3)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {({(0.6666666666666666667)} beta3+{(2.0)} xi2+{(0.6666666666666666667)} beta1-{(1.3333333333333333334)} beta2)} {({(0.6666666666666666667)} xi1-{(0.6666666666666666667)} beta3-{(1.3333333333333333334)} xi2-{(0.6666666666666666667)} beta1+{(0.6666666666666666667)} xi3+{(1.3333333333333333334)} beta2)}}{{({({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{(-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}-{(0.6666666666666666667)} \\frac{1}{\\sqrt{{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{(-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}}}";
        }

        von_mises_hess_6_1* clone() const
        {
            return new von_mises_hess_6_1(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_6_2 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return  3.3333333333333331e-01*pow( pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))-( 6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1]+6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2])*pow( pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))*( 2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[2])/4.0;
        }

    public:

        von_mises_hess_6_2()
        {
            this->_name = "von_mises_hess_6_2";
        }

        std::string csrc() const
        {
            return " 3.3333333333333331e-01*pow( pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))-( 6.6666666666666663e-01*var[6]+-6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1]+6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2])*pow( pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))*( 2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[2])/4.0";
        }

        std::string sym() const
        {
            return "-1/4*((0.6666666666666666667)*beta1-(1.3333333333333333334)*beta2+(0.6666666666666666667)*beta3+(2.0)*xi2)*(-(0.6666666666666666667)*beta1-(1.3333333333333333334)*xi3-(0.6666666666666666667)*beta2+(0.6666666666666666667)*xi1+(1.3333333333333333334)*beta3+(0.6666666666666666667)*xi2)*((-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2)^(2.0))^(-3/2)+(0.33333333333333333334)*((-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2)^(2.0))^(-1/2)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {(-{(1.3333333333333333334)} beta2+{(0.6666666666666666667)} beta3+{(2.0)} xi2+{(0.6666666666666666667)} beta1)} {(-{(0.6666666666666666667)} beta2+{(0.6666666666666666667)} xi1+{(1.3333333333333333334)} beta3+{(0.6666666666666666667)} xi2-{(0.6666666666666666667)} beta1-{(1.3333333333333333334)} xi3)}}{{({(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}+{(0.33333333333333333334)} \\frac{1}{\\sqrt{{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}}}}";
        }

        von_mises_hess_6_2* clone() const
        {
            return new von_mises_hess_6_2(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_6_3 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_6_3()
        {
            this->_name = "von_mises_hess_6_3";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_6_3* clone() const
        {
            return new von_mises_hess_6_3(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_6_4 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_6_4()
        {
            this->_name = "von_mises_hess_6_4";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_6_4* clone() const
        {
            return new von_mises_hess_6_4(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_6_5 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -(1.0/4.0)*( -1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[1]+2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2])*( 2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[2])*pow( pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0));
        }

    public:

        von_mises_hess_6_5()
        {
            this->_name = "von_mises_hess_6_5";
        }

        std::string csrc() const
        {
            return "-(1.0/4.0)*( -1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[1]+2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2])*( 2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[2])*pow( pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))";
        }

        std::string sym() const
        {
            return "-1/4*((-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0))^(-3/2)*((0.6666666666666666667)*beta1-(1.3333333333333333334)*beta2+(0.6666666666666666667)*beta3+(2.0)*xi2)*(-(1.3333333333333333334)*beta1+(0.6666666666666666667)*beta2+(2.0)*xi1+(0.6666666666666666667)*beta3)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {({(0.6666666666666666667)} beta2+{(2.0)} xi1+{(0.6666666666666666667)} beta3-{(1.3333333333333333334)} beta1)} {(-{(1.3333333333333333334)} beta2+{(0.6666666666666666667)} beta3+{(2.0)} xi2+{(0.6666666666666666667)} beta1)}}{{({(-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}";
        }

        von_mises_hess_6_5* clone() const
        {
            return new von_mises_hess_6_5(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_6_6 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return  pow( pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(1.0/2.0))-pow( 6.6666666666666663e-01*var[2]+2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[1],2.0)*pow( pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))/4.0;
        }

    public:

        von_mises_hess_6_6()
        {
            this->_name = "von_mises_hess_6_6";
        }

        std::string csrc() const
        {
            return " pow( pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(1.0/2.0))-pow( 6.6666666666666663e-01*var[2]+2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[1],2.0)*pow( pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))/4.0";
        }

        std::string sym() const
        {
            return "-1/4*((0.6666666666666666667)*beta3+(2.0)*xi2+(0.6666666666666666667)*beta1-(1.3333333333333333334)*beta2)^2*(((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1)^(2.0)+(-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0))^(-3/2)+(((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1)^(2.0)+(-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0))^(-1/2)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{{({(2.0)} xi2+{(0.6666666666666666667)} beta1-{(1.3333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{2}}{{({(-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}+\\frac{1}{\\sqrt{{(-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}}}";
        }

        von_mises_hess_6_6* clone() const
        {
            return new von_mises_hess_6_6(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_6_7 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -(1.0/4.0)*( -1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[2]+2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0])*pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00),-(3.0/2.0))*( 2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[0]);
        }

    public:

        von_mises_hess_6_7()
        {
            this->_name = "von_mises_hess_6_7";
        }

        std::string csrc() const
        {
            return "-(1.0/4.0)*( -1.3333333333333333e+00*var[1]+6.6666666666666663e-01*var[2]+2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0])*pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow(-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00),-(3.0/2.0))*( 2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[0])";
        }

        std::string sym() const
        {
            return "-1/4*((-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3)^(2.0)+((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0))^(-3/2)*(-(1.3333333333333333334)*beta2+(0.6666666666666666667)*beta3+(2.0)*xi2+(0.6666666666666666667)*beta1)*((0.6666666666666666667)*beta2-(1.3333333333333333334)*beta3+(0.6666666666666666667)*beta1+(2.0)*xi3)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {({(0.6666666666666666667)} beta3+{(2.0)} xi2+{(0.6666666666666666667)} beta1-{(1.3333333333333333334)} beta2)} {(-{(1.3333333333333333334)} beta3+{(0.6666666666666666667)} beta1+{(2.0)} xi3+{(0.6666666666666666667)} beta2)}}{{({(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{(-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}";
        }

        von_mises_hess_6_7* clone() const
        {
            return new von_mises_hess_6_7(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_7_0 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -( 6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7]+-6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2])*pow( pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))*( 6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[2])/4.0+3.3333333333333331e-01*pow( pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0));
        }

    public:

        von_mises_hess_7_0()
        {
            this->_name = "von_mises_hess_7_0";
        }

        std::string csrc() const
        {
            return "-( 6.6666666666666663e-01*var[6]+1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[7]+-6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[5]+-6.6666666666666663e-01*var[2])*pow( pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(3.0/2.0))*( 6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[2])/4.0+3.3333333333333331e-01*pow( pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow(-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00),-(1.0/2.0))";
        }

        std::string sym() const
        {
            return "(0.33333333333333333334)*((-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0))^(-1/2)-1/4*((-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0))^(-3/2)*((0.6666666666666666667)*beta1+(2.0)*xi3+(0.6666666666666666667)*beta2-(1.3333333333333333334)*beta3)*((1.3333333333333333334)*beta1+(0.6666666666666666667)*xi3-(0.6666666666666666667)*beta2-(1.3333333333333333334)*xi1-(0.6666666666666666667)*beta3+(0.6666666666666666667)*xi2)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {({(2.0)} xi3+{(0.6666666666666666667)} beta2-{(1.3333333333333333334)} beta3+{(0.6666666666666666667)} beta1)} {({(0.6666666666666666667)} xi3-{(0.6666666666666666667)} beta2-{(1.3333333333333333334)} xi1-{(0.6666666666666666667)} beta3+{(0.6666666666666666667)} xi2+{(1.3333333333333333334)} beta1)}}{{({(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{(-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1)}^{{(2.0)}}+{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}+{(0.33333333333333333334)} \\frac{1}{\\sqrt{{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{(-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1)}^{{(2.0)}}+{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}}}}";
        }

        von_mises_hess_7_0* clone() const
        {
            return new von_mises_hess_7_0(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_7_1 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -( 6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0]+6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1])*( -1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1])*pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))/4.0+3.3333333333333331e-01*pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00),-(1.0/2.0));
        }

    public:

        von_mises_hess_7_1()
        {
            this->_name = "von_mises_hess_7_1";
        }

        std::string csrc() const
        {
            return "-( 6.6666666666666663e-01*var[5]+-6.6666666666666663e-01*var[2]+-1.3333333333333333e+00*var[6]+-6.6666666666666663e-01*var[0]+6.6666666666666663e-01*var[7]+1.3333333333333333e+00*var[1])*( -1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1])*pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00),-(3.0/2.0))/4.0+3.3333333333333331e-01*pow( pow(-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00),-(1.0/2.0))";
        }

        std::string sym() const
        {
            return "(0.33333333333333333334)*((-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1)^(2.0)+(-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0)+((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0))^(-1/2)-1/4*(-(0.6666666666666666667)*beta3-(1.3333333333333333334)*xi2-(0.6666666666666666667)*beta1+(0.6666666666666666667)*xi3+(1.3333333333333333334)*beta2+(0.6666666666666666667)*xi1)*((-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1)^(2.0)+(-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0)+((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0))^(-3/2)*(-(1.3333333333333333334)*beta3+(0.6666666666666666667)*beta1+(2.0)*xi3+(0.6666666666666666667)*beta2)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {({(0.6666666666666666667)} beta1+{(2.0)} xi3+{(0.6666666666666666667)} beta2-{(1.3333333333333333334)} beta3)} {(-{(1.3333333333333333334)} xi2-{(0.6666666666666666667)} beta1+{(0.6666666666666666667)} xi3+{(1.3333333333333333334)} beta2+{(0.6666666666666666667)} xi1-{(0.6666666666666666667)} beta3)}}{{({({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{(-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}+{(0.33333333333333333334)} \\frac{1}{\\sqrt{{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{(-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3)}^{{(2.0)}}}}";
        }

        von_mises_hess_7_1* clone() const
        {
            return new von_mises_hess_7_1(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_7_2 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -( -6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1]+6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[6])*( 6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[2])*pow( pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6],2.0000000000000000e+00),-(3.0/2.0))/4.0+-6.6666666666666663e-01*pow( pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6],2.0000000000000000e+00),-(1.0/2.0));
        }

    public:

        von_mises_hess_7_2()
        {
            this->_name = "von_mises_hess_7_2";
        }

        std::string csrc() const
        {
            return "-( -6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[7]+-6.6666666666666663e-01*var[1]+6.6666666666666663e-01*var[5]+1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[6])*( 6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[2])*pow( pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6],2.0000000000000000e+00),-(3.0/2.0))/4.0+-6.6666666666666663e-01*pow( pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6],2.0000000000000000e+00),-(1.0/2.0))";
        }

        std::string sym() const
        {
            return "-(0.6666666666666666667)*(((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3)^(2.0))^(-1/2)-1/4*(-(0.6666666666666666667)*beta2+(0.6666666666666666667)*xi1+(1.3333333333333333334)*beta3+(0.6666666666666666667)*xi2-(0.6666666666666666667)*beta1-(1.3333333333333333334)*xi3)*((0.6666666666666666667)*beta2-(1.3333333333333333334)*beta3+(0.6666666666666666667)*beta1+(2.0)*xi3)*(((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3)^(2.0))^(-3/2)";
        }

        std::string latex() const
        {
            return "-{(0.6666666666666666667)} \\frac{1}{\\sqrt{{(-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}}}}-\\frac{1}{4} \\frac{ {({(0.6666666666666666667)} xi1+{(1.3333333333333333334)} beta3+{(0.6666666666666666667)} xi2-{(0.6666666666666666667)} beta1-{(1.3333333333333333334)} xi3-{(0.6666666666666666667)} beta2)} {(-{(1.3333333333333333334)} beta3+{(0.6666666666666666667)} beta1+{(2.0)} xi3+{(0.6666666666666666667)} beta2)}}{{({(-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}";
        }

        von_mises_hess_7_2* clone() const
        {
            return new von_mises_hess_7_2(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_7_3 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_7_3()
        {
            this->_name = "von_mises_hess_7_3";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_7_3* clone() const
        {
            return new von_mises_hess_7_3(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_7_4 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return 0.0;
        }

    public:

        von_mises_hess_7_4()
        {
            this->_name = "von_mises_hess_7_4";
        }

        std::string csrc() const
        {
            return "0.0";
        }

        std::string sym() const
        {
            return "0";
        }

        std::string latex() const
        {
            return "0";
        }

        von_mises_hess_7_4* clone() const
        {
            return new von_mises_hess_7_4(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_7_5 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -(1.0/4.0)*pow( pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6],2.0000000000000000e+00),-(3.0/2.0))*( 6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[2])*( -1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[1]+2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2]);
        }

    public:

        von_mises_hess_7_5()
        {
            this->_name = "von_mises_hess_7_5";
        }

        std::string csrc() const
        {
            return "-(1.0/4.0)*pow( pow( 6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6],2.0000000000000000e+00),-(3.0/2.0))*( 6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[2])*( -1.3333333333333333e+00*var[0]+6.6666666666666663e-01*var[1]+2.0000000000000000e+00*var[5]+6.6666666666666663e-01*var[2])";
        }

        std::string sym() const
        {
            return "-1/4*((-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1)^(2.0)+((0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1)^(2.0)+(-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3)^(2.0))^(-3/2)*((0.6666666666666666667)*beta2+(2.0)*xi1+(0.6666666666666666667)*beta3-(1.3333333333333333334)*beta1)*((0.6666666666666666667)*beta2-(1.3333333333333333334)*beta3+(0.6666666666666666667)*beta1+(2.0)*xi3)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {(-{(1.3333333333333333334)} beta3+{(0.6666666666666666667)} beta1+{(2.0)} xi3+{(0.6666666666666666667)} beta2)} {({(2.0)} xi1+{(0.6666666666666666667)} beta3-{(1.3333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}}{{({(-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2)}^{{(2.0)}}+{(-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2)}^{{(2.0)}}+{({(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}";
        }

        von_mises_hess_7_5* clone() const
        {
            return new von_mises_hess_7_5(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_7_6 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return -(1.0/4.0)*( 6.6666666666666663e-01*var[2]+2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[1])*( -1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1])*pow( pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5],2.0000000000000000e+00),-(3.0/2.0));
        }

    public:

        von_mises_hess_7_6()
        {
            this->_name = "von_mises_hess_7_6";
        }

        std::string csrc() const
        {
            return "-(1.0/4.0)*( 6.6666666666666663e-01*var[2]+2.0000000000000000e+00*var[6]+6.6666666666666663e-01*var[0]+-1.3333333333333333e+00*var[1])*( -1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7]+6.6666666666666663e-01*var[1])*pow( pow( 6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7]+-3.3333333333333331e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0]+6.6666666666666663e-01*var[1],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0]+-3.3333333333333331e-01*var[1]-var[5],2.0000000000000000e+00),-(3.0/2.0))";
        }

        std::string sym() const
        {
            return "-1/4*((0.6666666666666666667)*beta1+(2.0)*xi3+(0.6666666666666666667)*beta2-(1.3333333333333333334)*beta3)*((2.0)*xi2+(0.6666666666666666667)*beta1-(1.3333333333333333334)*beta2+(0.6666666666666666667)*beta3)*((-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2-(0.33333333333333333334)*beta3)^(2.0)+((0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2-xi1-(0.33333333333333333334)*beta3)^(2.0)+(-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2+(0.6666666666666666667)*beta3)^(2.0))^(-3/2)";
        }

        std::string latex() const
        {
            return "-\\frac{1}{4} \\frac{ {(-{(1.3333333333333333334)} beta2+{(0.6666666666666666667)} beta3+{(2.0)} xi2+{(0.6666666666666666667)} beta1)} {({(2.0)} xi3+{(0.6666666666666666667)} beta2-{(1.3333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}}{{({(-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3-{(0.33333333333333333334)} beta1)}^{{(2.0)}}+{(-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3+{(0.6666666666666666667)} beta1)}^{{(2.0)}}+{({(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3-xi2-{(0.33333333333333333334)} beta1)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}";
        }

        von_mises_hess_7_6* clone() const
        {
            return new von_mises_hess_7_6(*this);
        }
    };

    template< class VarContainer>
    class von_mises_hess_7_7 : public PSimpleBase< VarContainer, double>
    {
        double eval( const VarContainer &var) const
        {
            return  pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00),-(1.0/2.0))-pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00),-(3.0/2.0))*pow( 6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7],2.0)/4.0;
        }

    public:

        von_mises_hess_7_7()
        {
            this->_name = "von_mises_hess_7_7";
        }

        std::string csrc() const
        {
            return " pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00),-(1.0/2.0))-pow( pow( -3.3333333333333331e-01*var[1]-var[5]+-3.3333333333333331e-01*var[2]+6.6666666666666663e-01*var[0],2.0000000000000000e+00)+pow( 6.6666666666666663e-01*var[1]+-3.3333333333333331e-01*var[2]-var[6]+-3.3333333333333331e-01*var[0],2.0000000000000000e+00)+pow( -3.3333333333333331e-01*var[1]+6.6666666666666663e-01*var[2]+-3.3333333333333331e-01*var[0]-var[7],2.0000000000000000e+00),-(3.0/2.0))*pow( 6.6666666666666663e-01*var[1]+-1.3333333333333333e+00*var[2]+6.6666666666666663e-01*var[0]+2.0000000000000000e+00*var[7],2.0)/4.0";
        }

        std::string sym() const
        {
            return "((-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0)+((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2)^(2.0))^(-1/2)-1/4*((-(0.33333333333333333334)*beta3-xi2-(0.33333333333333333334)*beta1+(0.6666666666666666667)*beta2)^(2.0)+((0.6666666666666666667)*beta3-(0.33333333333333333334)*beta1-xi3-(0.33333333333333333334)*beta2)^(2.0)+(-xi1-(0.33333333333333333334)*beta3+(0.6666666666666666667)*beta1-(0.33333333333333333334)*beta2)^(2.0))^(-3/2)*(-(1.3333333333333333334)*beta3+(0.6666666666666666667)*beta1+(2.0)*xi3+(0.6666666666666666667)*beta2)^2";
        }

        std::string latex() const
        {
            return "\\frac{1}{\\sqrt{{(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3)}^{{(2.0)}}}}-\\frac{1}{4} \\frac{{({(0.6666666666666666667)} beta1+{(2.0)} xi3+{(0.6666666666666666667)} beta2-{(1.3333333333333333334)} beta3)}^{2}}{{({(-{(0.33333333333333333334)} beta1-xi3-{(0.33333333333333333334)} beta2+{(0.6666666666666666667)} beta3)}^{{(2.0)}}+{({(0.6666666666666666667)} beta1-{(0.33333333333333333334)} beta2-xi1-{(0.33333333333333333334)} beta3)}^{{(2.0)}}+{(-xi2-{(0.33333333333333333334)} beta1+{(0.6666666666666666667)} beta2-{(0.33333333333333333334)} beta3)}^{{(2.0)}})}^{{(\\frac{3}{2})}}}";
        }

        von_mises_hess_7_7* clone() const
        {
            return new von_mises_hess_7_7(*this);
        }
    };

    template<class VarContainer>
    class von_mises : public PFuncBase< VarContainer, double>
    {
    public:
        
        typedef typename PFuncBase< VarContainer, double>::size_type size_type;

        PSimpleBase< VarContainer, double> *_val;
        PSimpleBase< VarContainer, double> **_grad_val;
        PSimpleBase< VarContainer, double> ***_hess_val;
        
        von_mises()
        {
            construct();
        }

        von_mises(const von_mises &RHS )
        {
            construct(false);
            
            _val = RHS._val->clone();
            _grad_val[0] = RHS._grad_val[0]->clone();
            _grad_val[1] = RHS._grad_val[1]->clone();
            _grad_val[2] = RHS._grad_val[2]->clone();
            _grad_val[3] = RHS._grad_val[3]->clone();
            _grad_val[4] = RHS._grad_val[4]->clone();
            _grad_val[5] = RHS._grad_val[5]->clone();
            _grad_val[6] = RHS._grad_val[6]->clone();
            _grad_val[7] = RHS._grad_val[7]->clone();
            _hess_val[0][0] = RHS._hess_val[0][0]->clone();
            _hess_val[0][1] = RHS._hess_val[0][1]->clone();
            _hess_val[0][2] = RHS._hess_val[0][2]->clone();
            _hess_val[0][3] = RHS._hess_val[0][3]->clone();
            _hess_val[0][4] = RHS._hess_val[0][4]->clone();
            _hess_val[0][5] = RHS._hess_val[0][5]->clone();
            _hess_val[0][6] = RHS._hess_val[0][6]->clone();
            _hess_val[0][7] = RHS._hess_val[0][7]->clone();
            _hess_val[1][0] = RHS._hess_val[1][0]->clone();
            _hess_val[1][1] = RHS._hess_val[1][1]->clone();
            _hess_val[1][2] = RHS._hess_val[1][2]->clone();
            _hess_val[1][3] = RHS._hess_val[1][3]->clone();
            _hess_val[1][4] = RHS._hess_val[1][4]->clone();
            _hess_val[1][5] = RHS._hess_val[1][5]->clone();
            _hess_val[1][6] = RHS._hess_val[1][6]->clone();
            _hess_val[1][7] = RHS._hess_val[1][7]->clone();
            _hess_val[2][0] = RHS._hess_val[2][0]->clone();
            _hess_val[2][1] = RHS._hess_val[2][1]->clone();
            _hess_val[2][2] = RHS._hess_val[2][2]->clone();
            _hess_val[2][3] = RHS._hess_val[2][3]->clone();
            _hess_val[2][4] = RHS._hess_val[2][4]->clone();
            _hess_val[2][5] = RHS._hess_val[2][5]->clone();
            _hess_val[2][6] = RHS._hess_val[2][6]->clone();
            _hess_val[2][7] = RHS._hess_val[2][7]->clone();
            _hess_val[3][0] = RHS._hess_val[3][0]->clone();
            _hess_val[3][1] = RHS._hess_val[3][1]->clone();
            _hess_val[3][2] = RHS._hess_val[3][2]->clone();
            _hess_val[3][3] = RHS._hess_val[3][3]->clone();
            _hess_val[3][4] = RHS._hess_val[3][4]->clone();
            _hess_val[3][5] = RHS._hess_val[3][5]->clone();
            _hess_val[3][6] = RHS._hess_val[3][6]->clone();
            _hess_val[3][7] = RHS._hess_val[3][7]->clone();
            _hess_val[4][0] = RHS._hess_val[4][0]->clone();
            _hess_val[4][1] = RHS._hess_val[4][1]->clone();
            _hess_val[4][2] = RHS._hess_val[4][2]->clone();
            _hess_val[4][3] = RHS._hess_val[4][3]->clone();
            _hess_val[4][4] = RHS._hess_val[4][4]->clone();
            _hess_val[4][5] = RHS._hess_val[4][5]->clone();
            _hess_val[4][6] = RHS._hess_val[4][6]->clone();
            _hess_val[4][7] = RHS._hess_val[4][7]->clone();
            _hess_val[5][0] = RHS._hess_val[5][0]->clone();
            _hess_val[5][1] = RHS._hess_val[5][1]->clone();
            _hess_val[5][2] = RHS._hess_val[5][2]->clone();
            _hess_val[5][3] = RHS._hess_val[5][3]->clone();
            _hess_val[5][4] = RHS._hess_val[5][4]->clone();
            _hess_val[5][5] = RHS._hess_val[5][5]->clone();
            _hess_val[5][6] = RHS._hess_val[5][6]->clone();
            _hess_val[5][7] = RHS._hess_val[5][7]->clone();
            _hess_val[6][0] = RHS._hess_val[6][0]->clone();
            _hess_val[6][1] = RHS._hess_val[6][1]->clone();
            _hess_val[6][2] = RHS._hess_val[6][2]->clone();
            _hess_val[6][3] = RHS._hess_val[6][3]->clone();
            _hess_val[6][4] = RHS._hess_val[6][4]->clone();
            _hess_val[6][5] = RHS._hess_val[6][5]->clone();
            _hess_val[6][6] = RHS._hess_val[6][6]->clone();
            _hess_val[6][7] = RHS._hess_val[6][7]->clone();
            _hess_val[7][0] = RHS._hess_val[7][0]->clone();
            _hess_val[7][1] = RHS._hess_val[7][1]->clone();
            _hess_val[7][2] = RHS._hess_val[7][2]->clone();
            _hess_val[7][3] = RHS._hess_val[7][3]->clone();
            _hess_val[7][4] = RHS._hess_val[7][4]->clone();
            _hess_val[7][5] = RHS._hess_val[7][5]->clone();
            _hess_val[7][6] = RHS._hess_val[7][6]->clone();
            _hess_val[7][7] = RHS._hess_val[7][7]->clone();
            
        }

        von_mises& operator=( von_mises RHS )
        {
            using std::swap;
            
            swap(_val, RHS._val);
            swap(_grad_val[0], RHS._grad_val[0]);
            swap(_grad_val[1], RHS._grad_val[1]);
            swap(_grad_val[2], RHS._grad_val[2]);
            swap(_grad_val[3], RHS._grad_val[3]);
            swap(_grad_val[4], RHS._grad_val[4]);
            swap(_grad_val[5], RHS._grad_val[5]);
            swap(_grad_val[6], RHS._grad_val[6]);
            swap(_grad_val[7], RHS._grad_val[7]);
            swap(_hess_val[0][0], RHS._hess_val[0][0]);
            swap(_hess_val[0][1], RHS._hess_val[0][1]);
            swap(_hess_val[0][2], RHS._hess_val[0][2]);
            swap(_hess_val[0][3], RHS._hess_val[0][3]);
            swap(_hess_val[0][4], RHS._hess_val[0][4]);
            swap(_hess_val[0][5], RHS._hess_val[0][5]);
            swap(_hess_val[0][6], RHS._hess_val[0][6]);
            swap(_hess_val[0][7], RHS._hess_val[0][7]);
            swap(_hess_val[1][0], RHS._hess_val[1][0]);
            swap(_hess_val[1][1], RHS._hess_val[1][1]);
            swap(_hess_val[1][2], RHS._hess_val[1][2]);
            swap(_hess_val[1][3], RHS._hess_val[1][3]);
            swap(_hess_val[1][4], RHS._hess_val[1][4]);
            swap(_hess_val[1][5], RHS._hess_val[1][5]);
            swap(_hess_val[1][6], RHS._hess_val[1][6]);
            swap(_hess_val[1][7], RHS._hess_val[1][7]);
            swap(_hess_val[2][0], RHS._hess_val[2][0]);
            swap(_hess_val[2][1], RHS._hess_val[2][1]);
            swap(_hess_val[2][2], RHS._hess_val[2][2]);
            swap(_hess_val[2][3], RHS._hess_val[2][3]);
            swap(_hess_val[2][4], RHS._hess_val[2][4]);
            swap(_hess_val[2][5], RHS._hess_val[2][5]);
            swap(_hess_val[2][6], RHS._hess_val[2][6]);
            swap(_hess_val[2][7], RHS._hess_val[2][7]);
            swap(_hess_val[3][0], RHS._hess_val[3][0]);
            swap(_hess_val[3][1], RHS._hess_val[3][1]);
            swap(_hess_val[3][2], RHS._hess_val[3][2]);
            swap(_hess_val[3][3], RHS._hess_val[3][3]);
            swap(_hess_val[3][4], RHS._hess_val[3][4]);
            swap(_hess_val[3][5], RHS._hess_val[3][5]);
            swap(_hess_val[3][6], RHS._hess_val[3][6]);
            swap(_hess_val[3][7], RHS._hess_val[3][7]);
            swap(_hess_val[4][0], RHS._hess_val[4][0]);
            swap(_hess_val[4][1], RHS._hess_val[4][1]);
            swap(_hess_val[4][2], RHS._hess_val[4][2]);
            swap(_hess_val[4][3], RHS._hess_val[4][3]);
            swap(_hess_val[4][4], RHS._hess_val[4][4]);
            swap(_hess_val[4][5], RHS._hess_val[4][5]);
            swap(_hess_val[4][6], RHS._hess_val[4][6]);
            swap(_hess_val[4][7], RHS._hess_val[4][7]);
            swap(_hess_val[5][0], RHS._hess_val[5][0]);
            swap(_hess_val[5][1], RHS._hess_val[5][1]);
            swap(_hess_val[5][2], RHS._hess_val[5][2]);
            swap(_hess_val[5][3], RHS._hess_val[5][3]);
            swap(_hess_val[5][4], RHS._hess_val[5][4]);
            swap(_hess_val[5][5], RHS._hess_val[5][5]);
            swap(_hess_val[5][6], RHS._hess_val[5][6]);
            swap(_hess_val[5][7], RHS._hess_val[5][7]);
            swap(_hess_val[6][0], RHS._hess_val[6][0]);
            swap(_hess_val[6][1], RHS._hess_val[6][1]);
            swap(_hess_val[6][2], RHS._hess_val[6][2]);
            swap(_hess_val[6][3], RHS._hess_val[6][3]);
            swap(_hess_val[6][4], RHS._hess_val[6][4]);
            swap(_hess_val[6][5], RHS._hess_val[6][5]);
            swap(_hess_val[6][6], RHS._hess_val[6][6]);
            swap(_hess_val[6][7], RHS._hess_val[6][7]);
            swap(_hess_val[7][0], RHS._hess_val[7][0]);
            swap(_hess_val[7][1], RHS._hess_val[7][1]);
            swap(_hess_val[7][2], RHS._hess_val[7][2]);
            swap(_hess_val[7][3], RHS._hess_val[7][3]);
            swap(_hess_val[7][4], RHS._hess_val[7][4]);
            swap(_hess_val[7][5], RHS._hess_val[7][5]);
            swap(_hess_val[7][6], RHS._hess_val[7][6]);
            swap(_hess_val[7][7], RHS._hess_val[7][7]);
            
            return *this;
        }

        ~von_mises()
        {
            delete _val;

            delete _grad_val[0];
            delete _grad_val[1];
            delete _grad_val[2];
            delete _grad_val[3];
            delete _grad_val[4];
            delete _grad_val[5];
            delete _grad_val[6];
            delete _grad_val[7];
            delete [] _grad_val;

            delete _hess_val[0][0];
            delete _hess_val[0][1];
            delete _hess_val[0][2];
            delete _hess_val[0][3];
            delete _hess_val[0][4];
            delete _hess_val[0][5];
            delete _hess_val[0][6];
            delete _hess_val[0][7];
            delete _hess_val[1][0];
            delete _hess_val[1][1];
            delete _hess_val[1][2];
            delete _hess_val[1][3];
            delete _hess_val[1][4];
            delete _hess_val[1][5];
            delete _hess_val[1][6];
            delete _hess_val[1][7];
            delete _hess_val[2][0];
            delete _hess_val[2][1];
            delete _hess_val[2][2];
            delete _hess_val[2][3];
            delete _hess_val[2][4];
            delete _hess_val[2][5];
            delete _hess_val[2][6];
            delete _hess_val[2][7];
            delete _hess_val[3][0];
            delete _hess_val[3][1];
            delete _hess_val[3][2];
            delete _hess_val[3][3];
            delete _hess_val[3][4];
            delete _hess_val[3][5];
            delete _hess_val[3][6];
            delete _hess_val[3][7];
            delete _hess_val[4][0];
            delete _hess_val[4][1];
            delete _hess_val[4][2];
            delete _hess_val[4][3];
            delete _hess_val[4][4];
            delete _hess_val[4][5];
            delete _hess_val[4][6];
            delete _hess_val[4][7];
            delete _hess_val[5][0];
            delete _hess_val[5][1];
            delete _hess_val[5][2];
            delete _hess_val[5][3];
            delete _hess_val[5][4];
            delete _hess_val[5][5];
            delete _hess_val[5][6];
            delete _hess_val[5][7];
            delete _hess_val[6][0];
            delete _hess_val[6][1];
            delete _hess_val[6][2];
            delete _hess_val[6][3];
            delete _hess_val[6][4];
            delete _hess_val[6][5];
            delete _hess_val[6][6];
            delete _hess_val[6][7];
            delete _hess_val[7][0];
            delete _hess_val[7][1];
            delete _hess_val[7][2];
            delete _hess_val[7][3];
            delete _hess_val[7][4];
            delete _hess_val[7][5];
            delete _hess_val[7][6];
            delete _hess_val[7][7];
            delete [] _hess_val[0];
            delete [] _hess_val[1];
            delete [] _hess_val[2];
            delete [] _hess_val[3];
            delete [] _hess_val[4];
            delete [] _hess_val[5];
            delete [] _hess_val[6];
            delete [] _hess_val[7];
            delete [] _hess_val;
        }

        von_mises<VarContainer>* clone() const
        {
            return new von_mises<VarContainer>(*this);
        }

        PSimpleFunction< VarContainer, double> simplefunction() const
        {
            return PSimpleFunction< VarContainer, double>( *_val );
        }

        PSimpleFunction< VarContainer, double> grad_simplefunction(size_type di) const
        {
            return PSimpleFunction< VarContainer, double>( *_grad_val[di] );
        }

        PSimpleFunction< VarContainer, double> hess_simplefunction(size_type di, size_type dj) const
        {
            return PSimpleFunction< VarContainer, double>( *_hess_val[di][dj] );
        }

        double operator()(const VarContainer &var)
        {
            return (*_val)(var);
        }

        double grad(const VarContainer &var, size_type di)
        {
            return (*_grad_val[di])(var);
        }

        double hess(const VarContainer &var, size_type di, size_type dj)
        {
            return (*_hess_val[di][dj])(var);
        }

        void eval(const VarContainer &var)
        {
            (*_val)(var);
        }

        void eval_grad(const VarContainer &var)
        {
            (*_grad_val[0])(var);
            (*_grad_val[1])(var);
            (*_grad_val[2])(var);
            (*_grad_val[3])(var);
            (*_grad_val[4])(var);
            (*_grad_val[5])(var);
            (*_grad_val[6])(var);
            (*_grad_val[7])(var);
        }

        void eval_hess(const VarContainer &var)
        {
            (*_hess_val[0][0])(var);
            (*_hess_val[0][1])(var);
            (*_hess_val[0][2])(var);
            (*_hess_val[0][3])(var);
            (*_hess_val[0][4])(var);
            (*_hess_val[0][5])(var);
            (*_hess_val[0][6])(var);
            (*_hess_val[0][7])(var);
            (*_hess_val[1][0])(var);
            (*_hess_val[1][1])(var);
            (*_hess_val[1][2])(var);
            (*_hess_val[1][3])(var);
            (*_hess_val[1][4])(var);
            (*_hess_val[1][5])(var);
            (*_hess_val[1][6])(var);
            (*_hess_val[1][7])(var);
            (*_hess_val[2][0])(var);
            (*_hess_val[2][1])(var);
            (*_hess_val[2][2])(var);
            (*_hess_val[2][3])(var);
            (*_hess_val[2][4])(var);
            (*_hess_val[2][5])(var);
            (*_hess_val[2][6])(var);
            (*_hess_val[2][7])(var);
            (*_hess_val[3][0])(var);
            (*_hess_val[3][1])(var);
            (*_hess_val[3][2])(var);
            (*_hess_val[3][3])(var);
            (*_hess_val[3][4])(var);
            (*_hess_val[3][5])(var);
            (*_hess_val[3][6])(var);
            (*_hess_val[3][7])(var);
            (*_hess_val[4][0])(var);
            (*_hess_val[4][1])(var);
            (*_hess_val[4][2])(var);
            (*_hess_val[4][3])(var);
            (*_hess_val[4][4])(var);
            (*_hess_val[4][5])(var);
            (*_hess_val[4][6])(var);
            (*_hess_val[4][7])(var);
            (*_hess_val[5][0])(var);
            (*_hess_val[5][1])(var);
            (*_hess_val[5][2])(var);
            (*_hess_val[5][3])(var);
            (*_hess_val[5][4])(var);
            (*_hess_val[5][5])(var);
            (*_hess_val[5][6])(var);
            (*_hess_val[5][7])(var);
            (*_hess_val[6][0])(var);
            (*_hess_val[6][1])(var);
            (*_hess_val[6][2])(var);
            (*_hess_val[6][3])(var);
            (*_hess_val[6][4])(var);
            (*_hess_val[6][5])(var);
            (*_hess_val[6][6])(var);
            (*_hess_val[6][7])(var);
            (*_hess_val[7][0])(var);
            (*_hess_val[7][1])(var);
            (*_hess_val[7][2])(var);
            (*_hess_val[7][3])(var);
            (*_hess_val[7][4])(var);
            (*_hess_val[7][5])(var);
            (*_hess_val[7][6])(var);
            (*_hess_val[7][7])(var);
        }

        double operator()() const
        {
            return (*_val)();
        }

        double grad(size_type di) const
        {
            return (*_grad_val[di])();
        }

        double hess(size_type di, size_type dj) const
        {
            return (*_hess_val[di][dj])();
        }

    private:
        void construct(bool allocate = true)
        {
            this->_name = "von_mises";
            this->_var_name.clear();
            this->_var_name.push_back("beta1");
            this->_var_name.push_back("beta2");
            this->_var_name.push_back("beta3");
            this->_var_name.push_back("tau_y");
            this->_var_name.push_back("q");
            this->_var_name.push_back("xi1");
            this->_var_name.push_back("xi2");
            this->_var_name.push_back("xi3");
            this->_var_description.clear();
            this->_var_description.push_back("First principle stress");
            this->_var_description.push_back("Second principle stress");
            this->_var_description.push_back("Third principle stress");
            this->_var_description.push_back("Yield stress");
            this->_var_description.push_back("Conjugate stress-like quantity");
            this->_var_description.push_back("First principle deviatoric back stress");
            this->_var_description.push_back("Second principle deviatoric back stress");
            this->_var_description.push_back("Third principle deviatoric back stress");
            
            _grad_val = new PSimpleBase< VarContainer, double>*[8];
            
            _hess_val = new PSimpleBase< VarContainer, double>**[8];
            _hess_val[0] = new PSimpleBase< VarContainer, double>*[8];
            _hess_val[1] = new PSimpleBase< VarContainer, double>*[8];
            _hess_val[2] = new PSimpleBase< VarContainer, double>*[8];
            _hess_val[3] = new PSimpleBase< VarContainer, double>*[8];
            _hess_val[4] = new PSimpleBase< VarContainer, double>*[8];
            _hess_val[5] = new PSimpleBase< VarContainer, double>*[8];
            _hess_val[6] = new PSimpleBase< VarContainer, double>*[8];
            _hess_val[7] = new PSimpleBase< VarContainer, double>*[8];
            
            if(!allocate) return;
            
            _val = new von_mises_f<VarContainer>();
            
            _grad_val[0] = new von_mises_grad_0<VarContainer>();
            _grad_val[1] = new von_mises_grad_1<VarContainer>();
            _grad_val[2] = new von_mises_grad_2<VarContainer>();
            _grad_val[3] = new von_mises_grad_3<VarContainer>();
            _grad_val[4] = new von_mises_grad_4<VarContainer>();
            _grad_val[5] = new von_mises_grad_5<VarContainer>();
            _grad_val[6] = new von_mises_grad_6<VarContainer>();
            _grad_val[7] = new von_mises_grad_7<VarContainer>();
            
            _hess_val[0][0] = new von_mises_hess_0_0<VarContainer>();
            _hess_val[0][1] = new von_mises_hess_0_1<VarContainer>();
            _hess_val[0][2] = new von_mises_hess_0_2<VarContainer>();
            _hess_val[0][3] = new von_mises_hess_0_3<VarContainer>();
            _hess_val[0][4] = new von_mises_hess_0_4<VarContainer>();
            _hess_val[0][5] = new von_mises_hess_0_5<VarContainer>();
            _hess_val[0][6] = new von_mises_hess_0_6<VarContainer>();
            _hess_val[0][7] = new von_mises_hess_0_7<VarContainer>();
            _hess_val[1][0] = new von_mises_hess_1_0<VarContainer>();
            _hess_val[1][1] = new von_mises_hess_1_1<VarContainer>();
            _hess_val[1][2] = new von_mises_hess_1_2<VarContainer>();
            _hess_val[1][3] = new von_mises_hess_1_3<VarContainer>();
            _hess_val[1][4] = new von_mises_hess_1_4<VarContainer>();
            _hess_val[1][5] = new von_mises_hess_1_5<VarContainer>();
            _hess_val[1][6] = new von_mises_hess_1_6<VarContainer>();
            _hess_val[1][7] = new von_mises_hess_1_7<VarContainer>();
            _hess_val[2][0] = new von_mises_hess_2_0<VarContainer>();
            _hess_val[2][1] = new von_mises_hess_2_1<VarContainer>();
            _hess_val[2][2] = new von_mises_hess_2_2<VarContainer>();
            _hess_val[2][3] = new von_mises_hess_2_3<VarContainer>();
            _hess_val[2][4] = new von_mises_hess_2_4<VarContainer>();
            _hess_val[2][5] = new von_mises_hess_2_5<VarContainer>();
            _hess_val[2][6] = new von_mises_hess_2_6<VarContainer>();
            _hess_val[2][7] = new von_mises_hess_2_7<VarContainer>();
            _hess_val[3][0] = new von_mises_hess_3_0<VarContainer>();
            _hess_val[3][1] = new von_mises_hess_3_1<VarContainer>();
            _hess_val[3][2] = new von_mises_hess_3_2<VarContainer>();
            _hess_val[3][3] = new von_mises_hess_3_3<VarContainer>();
            _hess_val[3][4] = new von_mises_hess_3_4<VarContainer>();
            _hess_val[3][5] = new von_mises_hess_3_5<VarContainer>();
            _hess_val[3][6] = new von_mises_hess_3_6<VarContainer>();
            _hess_val[3][7] = new von_mises_hess_3_7<VarContainer>();
            _hess_val[4][0] = new von_mises_hess_4_0<VarContainer>();
            _hess_val[4][1] = new von_mises_hess_4_1<VarContainer>();
            _hess_val[4][2] = new von_mises_hess_4_2<VarContainer>();
            _hess_val[4][3] = new von_mises_hess_4_3<VarContainer>();
            _hess_val[4][4] = new von_mises_hess_4_4<VarContainer>();
            _hess_val[4][5] = new von_mises_hess_4_5<VarContainer>();
            _hess_val[4][6] = new von_mises_hess_4_6<VarContainer>();
            _hess_val[4][7] = new von_mises_hess_4_7<VarContainer>();
            _hess_val[5][0] = new von_mises_hess_5_0<VarContainer>();
            _hess_val[5][1] = new von_mises_hess_5_1<VarContainer>();
            _hess_val[5][2] = new von_mises_hess_5_2<VarContainer>();
            _hess_val[5][3] = new von_mises_hess_5_3<VarContainer>();
            _hess_val[5][4] = new von_mises_hess_5_4<VarContainer>();
            _hess_val[5][5] = new von_mises_hess_5_5<VarContainer>();
            _hess_val[5][6] = new von_mises_hess_5_6<VarContainer>();
            _hess_val[5][7] = new von_mises_hess_5_7<VarContainer>();
            _hess_val[6][0] = new von_mises_hess_6_0<VarContainer>();
            _hess_val[6][1] = new von_mises_hess_6_1<VarContainer>();
            _hess_val[6][2] = new von_mises_hess_6_2<VarContainer>();
            _hess_val[6][3] = new von_mises_hess_6_3<VarContainer>();
            _hess_val[6][4] = new von_mises_hess_6_4<VarContainer>();
            _hess_val[6][5] = new von_mises_hess_6_5<VarContainer>();
            _hess_val[6][6] = new von_mises_hess_6_6<VarContainer>();
            _hess_val[6][7] = new von_mises_hess_6_7<VarContainer>();
            _hess_val[7][0] = new von_mises_hess_7_0<VarContainer>();
            _hess_val[7][1] = new von_mises_hess_7_1<VarContainer>();
            _hess_val[7][2] = new von_mises_hess_7_2<VarContainer>();
            _hess_val[7][3] = new von_mises_hess_7_3<VarContainer>();
            _hess_val[7][4] = new von_mises_hess_7_4<VarContainer>();
            _hess_val[7][5] = new von_mises_hess_7_5<VarContainer>();
            _hess_val[7][6] = new von_mises_hess_7_6<VarContainer>();
            _hess_val[7][7] = new von_mises_hess_7_7<VarContainer>();
        }

    };


}
#endif
